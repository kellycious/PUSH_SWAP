prep/utils.c:24:		if (input->taba[i + 1] < input->taba[i])
prep/utils.c:90:	input->sizeA = size;
prep/utils.c:91:	input->sizeB = 0;
prep/utils.c:92:	input->taba = malloc(sizeof(int) * size);
prep/utils.c:93:	if (!input->taba)
prep/utils.c:95:	input->tabb = malloc(sizeof(int) * size);
prep/utils.c:96:	if (!input->tabb)
prep/utils.c:98:	input->copa = malloc(sizeof(int) * size);
prep/utils.c:99:	if (!input->copa)
prep/utils.c:101:	input->index = malloc(sizeof(int) * size);
prep/utils.c:102:	if (!input->index)
operations/pushB.c:23:	duplitab = malloc(sizeof(int) * (input->sizeB + 1));
operations/pushB.c:26:	duplitab[0] = input->taba[0];
operations/pushB.c:27:	while (i < input->sizeB)
operations/pushB.c:29:		duplitab[i + 1] = input->tabb[i];
operations/pushB.c:32:	free(input->tabb);
operations/pushB.c:33:	input->tabb = duplitab;
operations/pushB.c:34:	input->sizeB++;
operations/pushB.c:44:	duplitab = malloc(sizeof(int) * (input->sizeA));
operations/pushB.c:47:	while (i < input->sizeA - 1)
operations/pushB.c:49:		duplitab[i] = input->taba[i + 1];
operations/pushB.c:52:	free(input->taba);
operations/pushB.c:53:	input->taba = duplitab;
operations/pushB.c:54:	input->sizeA--;
operations/pushA.c:23:	duplitab = malloc(sizeof(int) * (input->sizeA + 1));
operations/pushA.c:26:	duplitab[0] = input->tabb[0];
operations/pushA.c:27:	while (i < input->sizeA)
operations/pushA.c:29:		duplitab[i + 1] = input->taba[i];
operations/pushA.c:32:	free(input->taba);
operations/pushA.c:33:	input->taba = duplitab;
operations/pushA.c:34:	input->sizeA++;
operations/pushA.c:44:	duplitab = malloc(sizeof(int) * (input->sizeB));
operations/pushA.c:47:	while (i < input->sizeB - 1)
operations/pushA.c:49:		duplitab[i] = input->tabb[i + 1];
operations/pushA.c:52:	free(input->tabb);
operations/pushA.c:53:	input->tabb = duplitab;
operations/pushA.c:54:	input->sizeB--;
algo/radix.c:15://copier la stackA input dans copa pour pouvoir la trier sans bouger input->taba
algo/radix.c:22:	while (i < input->sizeA)
algo/radix.c:24:		input->copa[i] = input->taba[i];
algo/radix.c:36:	while (i < input->sizeA - 1)
algo/radix.c:38:		if (input->copa[i] > input->copa[i + 1])
algo/radix.c:40:			ft_swap(&input->copa[i], &input->copa[i + 1]);
algo/radix.c:59:	while (i < input->sizeA)
algo/radix.c:62:		while (j < input->sizeA)
algo/radix.c:64:			if (input->taba[i] == input->copa[j])
algo/radix.c:65:				input->index[i] = j;
algo/radix.c:80:	size = input->sizeA;
algo/radix.c:103:	size = input->sizeA;
algo/radix.c:105:	input->taba = input->index;
algo/radix.c:111:			if (((input->taba[0] >> i) & 1) == 1)
algo/radix.c:112:				rotate_a(input->taba, input->sizeA);
algo/radix.c:117:		while (input->sizeB != 0)
algo/radix.c:121:	free(input->copa);
algo/radix.c:122:	free(input->index);
algo/smallalgo.c:36:	mini = min(input->taba, input->sizeA);
algo/smallalgo.c:37:	if (position(input->taba, input->sizeA, mini) == 1)
algo/smallalgo.c:38:		rotate_a(input->taba, input->sizeA);
algo/smallalgo.c:39:	if (position(input->taba, input->sizeA, mini) == 2)
algo/smallalgo.c:41:		rotate_a(input->taba, input->sizeA);
algo/smallalgo.c:42:		rotate_a(input->taba, input->sizeA);
algo/smallalgo.c:44:	else if (position(input->taba, input->sizeA, mini) == 3)
algo/smallalgo.c:45:		reverse_ra(input->taba, input->sizeA);
algo/smallalgo.c:46:	if (sorted_yn(input, input->sizeA) == 0)
algo/smallalgo.c:49:	sort_three(input->taba, 3);
algo/smallalgo.c:57:	mini = min(input->taba, input->sizeA);
algo/smallalgo.c:58:	if (position(input->taba, input->sizeA, mini) == 1)
algo/smallalgo.c:59:		rotate_a(input->taba, input->sizeA);
algo/smallalgo.c:60:	else if (position(input->taba, input->sizeA, mini) == 2)
algo/smallalgo.c:62:		rotate_a(input->taba, input->sizeA);
algo/smallalgo.c:63:		rotate_a(input->taba, input->sizeA);
algo/smallalgo.c:65:	else if (position(input->taba, input->sizeA, mini) == 3)
algo/smallalgo.c:67:		reverse_ra(input->taba, input->sizeA);
algo/smallalgo.c:68:		reverse_ra(input->taba, input->sizeA);
algo/smallalgo.c:70:	else if (position(input->taba, input->sizeA, mini) == 4)
algo/smallalgo.c:71:		reverse_ra(input->taba, input->sizeA);
algo/smallalgo.c:72:	if (sorted_yn(input, input->sizeA) == 0)
algo/smallalgo.c:81:	if (input->sizeA <= 3)
algo/smallalgo.c:82:		sort_three(input->taba, input->sizeA);
algo/smallalgo.c:83:	if (input->sizeA == 4)
algo/smallalgo.c:85:	if (input->sizeA == 5)
